package com.example.bluetoothtest;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;

import android.os.Bundle;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.EditText;

public class MainActivity extends Activity {

	public final static String EXTRA_MESSAGE = "com.example.bluetoothtest.MESSAGE";
	private Set<BluetoothDevice> pairedDevices;
	private String deviceInfo = "";
	public Intent newIntent;
	private static String address = "00:14:01:09:22:42"; //hc-06 MAC address
	private static final int REQUEST_ENABLE_BT = 1;
	private BluetoothAdapter btAdapter = null;
	private BluetoothSocket btSocket = null;
	private OutputStream outStream = null;

	// Well known SPP UUID
	private static final UUID MY_UUID =
			UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		btAdapter = BluetoothAdapter.getDefaultAdapter();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	/** Called when the user clicks the Send button */
	public void sendMessage(View view) {
		//Intent newIntent = new Intent(this, DisplayMessageActivity.class);
		EditText editText = (EditText) findViewById(R.id.edit_message);
		String message = editText.getText().toString();


		sendData(message);
	}

	/*protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == REQUEST_ENABLE_BT) {
			if (btAdapter.isEnabled()) {
				continueBluetoothTest();
			}
		}
	}

	public void continueBluetoothTest(){
		// get paired devices
		/*pairedDevices = btAdapter.getBondedDevices();

		// put it's one to the adapter
		for(BluetoothDevice device : pairedDevices)
			myArrayAdapter.add(device.getName()+ "\n" + device.getAddress());*/

/*		if (btAdapter.isDiscovering()) {
			// the button is pressed when it discovers, so cancel the discovery
			btAdapter.cancelDiscovery();
		}
		else {
			//myArrayAdapter.clear();
			btAdapter.startDiscovery();

			registerReceiver(myReceiver, new IntentFilter(BluetoothDevice.ACTION_FOUND));
		}

	}
*/
	@Override
	public void onResume() {
		super.onResume();

		System.out.println("...In onResume - Attempting client connect...");
		
		if (btAdapter == null) {
			System.out.println("NO BLUETOOTH YO!!");
			//newIntent.putExtra(EXTRA_MESSAGE, message);
		}

		if (!btAdapter.isEnabled()) {
			//Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			//startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
			System.out.println("ENABLE BLUETOOTH YO!!");
			//newIntent.putExtra(EXTRA_MESSAGE, message);
			//startActivity(newIntent);
		}

		// Set up a pointer to the remote node using it's address.
		BluetoothDevice device = btAdapter.getRemoteDevice(address);

		// Two things are needed to make a connection:
		//   A MAC address, which we got above.
		//   A Service ID or UUID.  In this case we are using the
		//     UUID for SPP.
		try {
			btSocket = device.createRfcommSocketToServiceRecord(device.getUuids()[0].getUuid());
		} catch (IOException e) {
			System.out.println("Fatal Error In onResume() and socket create failed: " + e.getMessage() + ".");
		}

		// Discovery is resource intensive.  Make sure it isn't going on
		// when you attempt to connect and pass your message.
		btAdapter.cancelDiscovery();

		// Establish the connection.  This will block until it connects.
		System.out.println("...Connecting to Remote...");
		try {
			btSocket.connect();
			System.out.println("...Connection established and data link opened...");
		} catch (IOException e) {
			try {
				btSocket.close();
			} catch (IOException e2) {
				System.out.println("Fatal Error In onResume() and unable to close socket during connection failure" + e2.getMessage() + ".");
			}
		}

		// Create a data stream so we can talk to server.
		System.out.println("...Creating Socket...");

		try {
			outStream = btSocket.getOutputStream();
		} catch (IOException e) {
			System.out.println("Fatal Error In onResume() and output stream creation failed:" + e.getMessage() + ".");
		}
	}

	@Override
	public void onPause() {
		super.onPause();

		System.out.println("...In onPause()...");

		if (outStream != null) {
			try {
				outStream.flush();
			} catch (IOException e) {
				System.out.println("Fatal Error In onPause() and failed to flush output stream: " + e.getMessage() + ".");
			}
		}

		try     {
			btSocket.close();
		} catch (IOException e2) {
			System.out.println("Fatal Error In onPause() and failed to close socket." + e2.getMessage() + ".");
		}
	}


	private void sendData(String message) {
		byte[] msgBuffer = message.getBytes();

		try {
			outStream.write(msgBuffer);
		} catch (IOException e) {
			String msg = "In onResume() and an exception occurred during write: " + e.getMessage();
			if (address.equals("00:14:01:09:22:42")) 
				message = "ERROR ERROR ERROR";      
		}
	}

/*
	private final BroadcastReceiver myReceiver = new BroadcastReceiver() {
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			// When discovery finds a device
			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				// Get the BluetoothDevice object from the Intent
				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				// Add the name and address to an array adapter to show in a ListView
				deviceInfo = device.getName() + "\n" + device.getAddress();
				//myArrayAdapter.notifyDataSetChanged();
				newIntent.putExtra(EXTRA_MESSAGE, deviceInfo);
				startActivity(newIntent);
			}
		}
	};
*/
/*	
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		unregisterReceiver(myReceiver);
	}


*/

}
